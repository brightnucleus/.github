name: Testing

on:
  workflow_call:
    inputs:
      minimum-php:
        description: 'Minimum PHP version to test against.'
        type: string
        required: false
        default: '5.3'

# Cancels all previous workflow runs for the same branch that have not yet completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  get-matrix:
    name: Get base test matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.base-matrix.outputs.matrix }}
    steps:
    - name: Set matrix
      id: base-matrix
      run: |
        MATRIX=$(cat << EOF
        {
          "include": [
            {
              "php": "5.3"
            },
            {
              "php": "5.4"
            },
            {
              "php": "5.5"
            },
            {
              "php": "5.6"
            },
            {
              "php": "7.0"
            },
            {
              "php": "7.1"
            },
            {
              "php": "7.2"
            },
            {
              "php": "7.3"
            },
            {
              "php": "7.4"
            },
            {
              "php": "8.0"
            },
            {
              "php": "8.1"
            },
            {
              "php": "8.2"
            },
            {
              "php": "8.3"
            }
          ]
        }
        EOF
        )
        echo matrix=$MATRIX >> $GITHUB_OUTPUT

  prepare-unit:
    name: Prepare matrix for unit tests
    needs: get-matrix
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Check existence of composer.json & phpunit.xml.dist files
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "composer.json, phpunit.xml.dist"

      - name: Set matrix
        id: set-matrix
        run: |
          if [[ $FILE_EXISTS == 'true' ]]; then
            echo "matrix=$(jq -c '.include |= map(with_entries(select(.key == "php"))) | .include |= map(select(.php >= "${{ inputs.minimum-php }}"))' <<< $BASE_MATRIX)" >> $GITHUB_OUTPUT
          else
            echo "matrix=" >> $GITHUB_OUTPUT
          fi
        env:
          BASE_MATRIX: ${{ needs.get-matrix.outputs.matrix }}
          FILE_EXISTS: ${{ steps.check_files.outputs.files_exists == 'true' }}

  unit: #-----------------------------------------------------------------------
    needs: prepare-unit
    if: ${{ needs.prepare-unit.outputs.matrix != '' }}
    name: Unit test /  PHP ${{ matrix.php }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-unit.outputs.matrix) }}
    runs-on: ubuntu-20.04

    steps:
      - name: Check out source code
        uses: actions/checkout@v4

      - name: Set up PHP environment (PHP 5.6 - 7.1)
        if: ${{ matrix.php < '7.2' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php }}'
          coverage: none
          tools: composer:2.2,cs2pr
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up PHP environment (PHP 7.2+)
        if: ${{ matrix.php >= '7.2' }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php }}'
          coverage: none
          tools: composer,cs2pr
        env:
          COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Composer dependencies & cache dependencies
        uses: "ramsey/composer-install@v2"
        env:
          COMPOSER_ROOT_VERSION: dev-${{ github.event.repository.default_branch }}
        with:
          # Bust the cache at least once a month - output format: YYYY-MM.
          custom-cache-suffix: $(date -u "+%Y-%m")

      - name: Setup problem matcher to provide annotations for PHPUnit
        run: echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"

      - name: Run PHPUnit
        run: vendor/bin/phpunit --verbose --colors=always
